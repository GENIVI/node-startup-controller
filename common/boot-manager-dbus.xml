<?xml version="1.0" encoding="UTF-8"?>
<node name="/org/genivi/BootManager1">
  <!--
    org.genivi.BootManager1:
    @short_description: Interface for simplified control over systemd units.

    The GENIVI Boot Manager service allows other components in the system to
    control the lifetime of systemd units, e.g. by starting and stopping them
    during system runtime.

    It's goal is to safe-guard the access to systemd and provide a simplified
    interface to controling units based on asynchronous D-Bus methods.
  -->
  <interface name="org.genivi.BootManager1">
    <!--
      Start:
      @unit: A unit filename (e.g. "app1.unit").
      @result: The result of the unit start request.

      Attempts to start a unit through systemd. Possible values for the
      result are:

      done - the unit was started successfully.
      failed - the unit startup failed.
      timeout - the unit startup job timed out.
      canceled - the unit startup was canceled by someone else.
      dependency - a dependency or non-dependency could not be started or stopped.
      skipped - the unit startup was skipped.

      These values are identical to the possible job results systemd implements.

    -->
    <method name="Start">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg name="unit" type="s" direction="in"/>
      <arg name="result" type="s" direction="out"/>
    </method>

    <!--
      Stop:
      @unit: A unit filename (e.g. "app1.unit").
      @result: The result of the unit stop request.

      Attempts to stop a running unit through systemd. The possible result
      values are the same as for the Start() method.
    -->
    <method name="Stop">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg name="unit" type="s" direction="in"/>
      <arg name="result" type="s" direction="out"/>
    </method>

    <!--
      Kill:
      @unit: A unit filename (e.g. "app1.unit").
      @result: The result of the unit kill request.

      Attempts to kill a running unit through systemd. The possible result
      values are the same as for the Start() method.
    -->
    <method name="Kill">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg name="unit" type="s" direction="in"/>
      <arg name="result" type="s" direction="out"/>
    </method>

    <!--
      Restart:
      @unit: A unit filename (e.g. "app1.unit").
      @result: The result of the unit stop request.

      Attempts to restart a running unit through systemd. The possible result
      values are the same as for the Start() method.
    -->
    <method name="Restart">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg name="unit" type="s" direction="in"/>
      <arg name="result" type="s" direction="out"/>
    </method>

    <!--
      Isolate:
      @unit: A unit filename (e.g. "transport-mode.target").
      @result: The result of the unit isolate request.

      Attempts to isolate a running unit through systemd. The possible result
      values are the same as for the Start() method.

      Isolating a unit (usually a target) is similar to switching to a
      certain runlevel in traditional Linux systems. In IVI systems it can be
      used to switch between system modes such as user mode, transport mode,
      loading mode etc.
    -->
    <method name="Isolate">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg name="unit" type="s" direction="in"/>
      <arg name="result" type="s" direction="out"/>
    </method>

    <!--
      List:
      @apps: Return parameter that is an array of all available unit filenames.

      Lists all unit filenames currently known to systemd.
    -->
    <method name="List">
      <annotation name="org.freedesktop.DBus.GLib.Async" value="true"/>
      <arg name="apps" type="as" direction="out"/>
    </method>
  </interface>
</node>
